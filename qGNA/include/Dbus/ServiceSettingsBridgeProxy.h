/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -p ServiceSettingsBridgeProxy -c ServiceSettingsBridgeProxy ServiceSettingsBridge.interface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SERVICESETTINGSBRIDGEPROXY_H_1409823624
#define SERVICESETTINGSBRIDGEPROXY_H_1409823624

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.gamenet.dbus.ServiceSettings
 */
class ServiceSettingsBridgeProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.gamenet.dbus.ServiceSettings"; }

public:
    ServiceSettingsBridgeProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ServiceSettingsBridgeProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> downloadPath(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("downloadPath"), argumentList);
    }

    inline QDBusPendingReply<int> gameSize(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("gameSize"), argumentList);
    }

    inline QDBusPendingReply<bool> hasDownloadPath(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("hasDownloadPath"), argumentList);
    }

    inline QDBusPendingReply<QString> installPath(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("installPath"), argumentList);
    }

    inline QDBusPendingReply<bool> isDefaultDownloadPath(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("isDefaultDownloadPath"), argumentList);
    }

    inline QDBusPendingReply<bool> isDefaultInstallPath(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("isDefaultInstallPath"), argumentList);
    }

    inline QDBusPendingReply<QString> name(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("name"), argumentList);
    }

    inline QDBusPendingReply<> setDownloadPath(const QString &serviceId, const QString &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId) << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QLatin1String("setDownloadPath"), argumentList);
    }

    inline QDBusPendingReply<> setInstallPath(const QString &serviceId, const QString &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId) << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QLatin1String("setInstallPath"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace gamenet {
    namespace dbus {
      typedef ::ServiceSettingsBridgeProxy ServiceSettings;
    }
  }
}
#endif
