/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -a ServiceSettingsBridgeAdaptor -c ServiceSettingsBridgeAdaptor ServiceSettingsBridge.interface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include <Host/DBus/ServiceSettingsBridgeAdaptor.h>
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class ServiceSettingsBridgeAdaptor
 */

ServiceSettingsBridgeAdaptor::ServiceSettingsBridgeAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ServiceSettingsBridgeAdaptor::~ServiceSettingsBridgeAdaptor()
{
    // destructor
}

QString ServiceSettingsBridgeAdaptor::downloadPath(const QString &serviceId)
{
    // handle method call com.gamenet.dbus.ServiceSettings.downloadPath
    QString out0;
    QMetaObject::invokeMethod(parent(), "downloadPath", Q_RETURN_ARG(QString, out0), Q_ARG(QString, serviceId));
    return out0;
}

qulonglong ServiceSettingsBridgeAdaptor::gameSize(const QString &serviceId)
{
    // handle method call com.gamenet.dbus.ServiceSettings.gameSize
    qulonglong out0;
    QMetaObject::invokeMethod(parent(), "gameSize", Q_RETURN_ARG(qulonglong, out0), Q_ARG(QString, serviceId));
    return out0;
}

bool ServiceSettingsBridgeAdaptor::hasDownloadPath(const QString &serviceId)
{
    // handle method call com.gamenet.dbus.ServiceSettings.hasDownloadPath
    bool out0;
    QMetaObject::invokeMethod(parent(), "hasDownloadPath", Q_RETURN_ARG(bool, out0), Q_ARG(QString, serviceId));
    return out0;
}

QString ServiceSettingsBridgeAdaptor::installPath(const QString &serviceId)
{
    // handle method call com.gamenet.dbus.ServiceSettings.installPath
    QString out0;
    QMetaObject::invokeMethod(parent(), "installPath", Q_RETURN_ARG(QString, out0), Q_ARG(QString, serviceId));
    return out0;
}

bool ServiceSettingsBridgeAdaptor::isDefaultDownloadPath(const QString &serviceId)
{
    // handle method call com.gamenet.dbus.ServiceSettings.isDefaultDownloadPath
    bool out0;
    QMetaObject::invokeMethod(parent(), "isDefaultDownloadPath", Q_RETURN_ARG(bool, out0), Q_ARG(QString, serviceId));
    return out0;
}

bool ServiceSettingsBridgeAdaptor::isDefaultInstallPath(const QString &serviceId)
{
    // handle method call com.gamenet.dbus.ServiceSettings.isDefaultInstallPath
    bool out0;
    QMetaObject::invokeMethod(parent(), "isDefaultInstallPath", Q_RETURN_ARG(bool, out0), Q_ARG(QString, serviceId));
    return out0;
}

bool ServiceSettingsBridgeAdaptor::isDownloadable(const QString &serviceId)
{
    // handle method call com.gamenet.dbus.ServiceSettings.isDownloadable
    bool out0;
    QMetaObject::invokeMethod(parent(), "isDownloadable", Q_RETURN_ARG(bool, out0), Q_ARG(QString, serviceId));
    return out0;
}

bool ServiceSettingsBridgeAdaptor::isOverlayEnabled(const QString &serviceId)
{
    // handle method call com.gamenet.dbus.ServiceSettings.isOverlayEnabled
    bool out0;
    QMetaObject::invokeMethod(parent(), "isOverlayEnabled", Q_RETURN_ARG(bool, out0), Q_ARG(QString, serviceId));
    return out0;
}

bool ServiceSettingsBridgeAdaptor::isPrefer32Bit(const QString &serviceId)
{
    // handle method call com.gamenet.dbus.ServiceSettings.isPrefer32Bit
    bool out0;
    QMetaObject::invokeMethod(parent(), "isPrefer32Bit", Q_RETURN_ARG(bool, out0), Q_ARG(QString, serviceId));
    return out0;
}

QString ServiceSettingsBridgeAdaptor::name(const QString &serviceId)
{
    // handle method call com.gamenet.dbus.ServiceSettings.name
    QString out0;
    QMetaObject::invokeMethod(parent(), "name", Q_RETURN_ARG(QString, out0), Q_ARG(QString, serviceId));
    return out0;
}

void ServiceSettingsBridgeAdaptor::setDownloadPath(const QString &serviceId, const QString &path)
{
    // handle method call com.gamenet.dbus.ServiceSettings.setDownloadPath
    QMetaObject::invokeMethod(parent(), "setDownloadPath", Q_ARG(QString, serviceId), Q_ARG(QString, path));
}

void ServiceSettingsBridgeAdaptor::setInstallPath(const QString &serviceId, const QString &path)
{
    // handle method call com.gamenet.dbus.ServiceSettings.setInstallPath
    QMetaObject::invokeMethod(parent(), "setInstallPath", Q_ARG(QString, serviceId), Q_ARG(QString, path));
}

void ServiceSettingsBridgeAdaptor::setOverlayEnabled(const QString &serviceId, bool enabled)
{
    // handle method call com.gamenet.dbus.ServiceSettings.setOverlayEnabled
    QMetaObject::invokeMethod(parent(), "setOverlayEnabled", Q_ARG(QString, serviceId), Q_ARG(bool, enabled));
}

void ServiceSettingsBridgeAdaptor::setPrefer32Bit(const QString &serviceId, bool value)
{
    // handle method call com.gamenet.dbus.ServiceSettings.setPrefer32Bit
    QMetaObject::invokeMethod(parent(), "setPrefer32Bit", Q_ARG(QString, serviceId), Q_ARG(bool, value));
}

