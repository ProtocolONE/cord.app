/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -V -p ConnectionBridgeProxy -c ConnectionBridgeProxy ConnectionBridge.interface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CONNECTIONBRIDGEPROXY_H
#define CONNECTIONBRIDGEPROXY_H

#include <Host/Bridge/Credential.h>

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.protocolone.launcher.dbus.Connection
 */
class ConnectionBridgeProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.protocolone.launcher.dbus.Connection"; }

public:
    ConnectionBridgeProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~ConnectionBridgeProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> close()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("close"), argumentList);
    }

    inline QDBusPendingReply<> ping()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ping"), argumentList);
    }

    inline QDBusPendingReply<> setApplicationName(const QString &applicationName)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(applicationName);
        return asyncCallWithArgumentList(QStringLiteral("setApplicationName"), argumentList);
    }

    inline QDBusPendingReply<> setCredential(P1::Host::Bridge::Credential credential)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(credential);
        return asyncCallWithArgumentList(QStringLiteral("setCredential"), argumentList);
    }

    inline QDBusPendingReply<> setSecondCredential(P1::Host::Bridge::Credential credential)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(credential);
        return asyncCallWithArgumentList(QStringLiteral("setSecondCredential"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void pong();
    void wrongCredential(const QString &userId);
};

namespace com {
  namespace p1 {
    namespace dbus {
      typedef ::ConnectionBridgeProxy Connection;
    }
  }
}
#endif
