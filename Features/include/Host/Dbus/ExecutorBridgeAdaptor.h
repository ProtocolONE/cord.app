/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -V -a ExecutorBridgeAdaptor -c ExecutorBridgeAdaptor ExecutorBridge.interface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef EXECUTORBRIDGEADAPTOR_H
#define EXECUTORBRIDGEADAPTOR_H

#include <Host/Bridge/ExecutorBridge.h>

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.gamenet.dbus.Executor
 */
class ExecutorBridgeAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.gamenet.dbus.Executor")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.gamenet.dbus.Executor\">\n"
"    <signal name=\"serviceStarted\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"serviceId\"/>\n"
"    </signal>\n"
"    <signal name=\"serviceFinished\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"serviceId\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"finishState\"/>\n"
"    </signal>\n"
"    <signal name=\"secondServiceStarted\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"serviceId\"/>\n"
"    </signal>\n"
"    <signal name=\"secondServiceFinished\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"serviceId\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"finishState\"/>\n"
"    </signal>\n"
"    <method name=\"isGameStarted\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"serviceId\"/>\n"
"    </method>\n"
"    <method name=\"isAnyGameStarted\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"canExecuteSecond\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"serviceId\"/>\n"
"    </method>\n"
"    <method name=\"shutdownSecond\">\n"
"      <annotation value=\"true\" name=\"org.freedesktop.DBus.Method.NoReply\"/>\n"
"    </method>\n"
"    <method name=\"terminateGame\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"serviceId\"/>\n"
"      <annotation value=\"true\" name=\"org.freedesktop.DBus.Method.NoReply\"/>\n"
"    </method>\n"
"    <method name=\"terminateGame\">\n"
"      <annotation value=\"true\" name=\"org.freedesktop.DBus.Method.NoReply\"/>\n"
"    </method>\n"
"    <method name=\"execute\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"serviceId\"/>\n"
"      <arg direction=\"in\" type=\"a(sii)\" name=\"credential\"/>\n"
"      <annotation value=\"GameNet::Host::Bridge::Credential\" name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
"    </method>\n"
"    <method name=\"executeSecond\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"serviceId\"/>\n"
"      <arg direction=\"in\" type=\"a(sii)\" name=\"credential\"/>\n"
"      <annotation value=\"GameNet::Host::Bridge::Credential\" name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
"      <arg direction=\"in\" type=\"a(sii)\" name=\"secondCredential\"/>\n"
"      <annotation value=\"GameNet::Host::Bridge::Credential\" name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    ExecutorBridgeAdaptor(QObject *parent);
    virtual ~ExecutorBridgeAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    bool canExecuteSecond(const QString &serviceId);
    Q_NOREPLY void execute(const QString &serviceId, GameNet::Host::Bridge::Credential credential);
    Q_NOREPLY void executeSecond(const QString &serviceId, GameNet::Host::Bridge::Credential credential, GameNet::Host::Bridge::Credential secondCredential);
    bool isAnyGameStarted();
    bool isGameStarted(const QString &serviceId);
    Q_NOREPLY void shutdownSecond();
    Q_NOREPLY void terminateGame();
    Q_NOREPLY void terminateGame(const QString &serviceId);
Q_SIGNALS: // SIGNALS
    void secondServiceFinished(const QString &serviceId, int finishState);
    void secondServiceStarted(const QString &serviceId);
    void serviceFinished(const QString &serviceId, int finishState);
    void serviceStarted(const QString &serviceId);
};

#endif
