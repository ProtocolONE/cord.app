/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -p LicenseManagerBridgeProxy -c LicenseManagerBridgeProxy LicenseManagerBridge.interface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef LICENSEMANAGERBRIDGEPROXY_H
#define LICENSEMANAGERBRIDGEPROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.gamenet.dbus.LicenseManager
 */
class LicenseManagerBridgeProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.gamenet.dbus.LicenseManager"; }

public:
    LicenseManagerBridgeProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~LicenseManagerBridgeProxy();

public Q_SLOTS: // METHODS
    inline Q_NOREPLY void acceptLicense(const QString &serviceId, const QString &hash)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId) << QVariant::fromValue(hash);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("acceptLicense"), argumentList);
    }

    inline QDBusPendingReply<bool> hasAcceptedLicense(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QStringLiteral("hasAcceptedLicense"), argumentList);
    }

    inline QDBusPendingReply<bool> hasAcceptedLicense()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("hasAcceptedLicense"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace gamenet {
    namespace dbus {
      typedef ::LicenseManagerBridgeProxy LicenseManager;
    }
  }
}
#endif
