/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -V -p ServiceHandleBridgeProxy -c ServiceHandleBridgeProxy ServiceHandleBridge.interface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SERVICEHANDLEBRIDGEPROXY_H
#define SERVICEHANDLEBRIDGEPROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.gamenet.dbus.ServiceHandle
 */
class ServiceHandleBridgeProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.gamenet.dbus.ServiceHandle"; }

public:
    ServiceHandleBridgeProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~ServiceHandleBridgeProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> lock(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QStringLiteral("lock"), argumentList);
    }

    inline QDBusPendingReply<> unlock(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QStringLiteral("unlock"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void locked(const QString &serviceId);
    void unlocked(const QString &serviceId);
};

namespace com {
  namespace gamenet {
    namespace dbus {
      typedef ::ServiceHandleBridgeProxy ServiceHandle;
    }
  }
}
#endif
