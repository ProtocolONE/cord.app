/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -p ApplicationStatisticBridgeProxy -c ApplicationStatisticBridgeProxy ApplicationStatisticBridge.interface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef APPLICATIONSTATISTICBRIDGEPROXY_H_1412072931
#define APPLICATIONSTATISTICBRIDGEPROXY_H_1412072931

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.gamenet.dbus.ApplicationStatistic
 */
class ApplicationStatisticBridgeProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.gamenet.dbus.ApplicationStatistic"; }

public:
    ApplicationStatisticBridgeProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ApplicationStatisticBridgeProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<int> executeGameFailedCount(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("executeGameFailedCount"), argumentList);
    }

    inline QDBusPendingReply<int> executeGameSuccessCount(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("executeGameSuccessCount"), argumentList);
    }

    inline QDBusPendingReply<int> executeGameTotalCount(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("executeGameTotalCount"), argumentList);
    }

    inline QDBusPendingReply<qulonglong> gameInstallDate(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("gameInstallDate"), argumentList);
    }

    inline QDBusPendingReply<qulonglong> gameLastExecutionTime(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("gameLastExecutionTime"), argumentList);
    }

    inline QDBusPendingReply<qulonglong> installDate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("installDate"), argumentList);
    }

    inline QDBusPendingReply<QString> installWithService()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("installWithService"), argumentList);
    }

    inline QDBusPendingReply<bool> isGameInstalled(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("isGameInstalled"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace gamenet {
    namespace dbus {
      typedef ::ApplicationStatisticBridgeProxy ApplicationStatistic;
    }
  }
}
#endif
