/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -p ExecutorBridgeProxy -c ExecutorBridgeProxy ExecutorBridge.interface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef EXECUTORBRIDGEPROXY_H_1411119968
#define EXECUTORBRIDGEPROXY_H_1411119968

#include <Host/Bridge/ExecutorBridge.h>

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.gamenet.dbus.Executor
 */
class ExecutorBridgeProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.gamenet.dbus.Executor"; }

public:
    ExecutorBridgeProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ExecutorBridgeProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> canExecuteSecond(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("canExecuteSecond"), argumentList);
    }

    inline QDBusPendingReply<> execute(const QString &serviceId, GameNet::Host::Bridge::Credential credential)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId) << QVariant::fromValue(credential);
        return asyncCallWithArgumentList(QLatin1String("execute"), argumentList);
    }

    inline QDBusPendingReply<> executeSecond(const QString &serviceId, GameNet::Host::Bridge::Credential credential, GameNet::Host::Bridge::Credential secondCredential)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId) << QVariant::fromValue(credential) << QVariant::fromValue(secondCredential);
        return asyncCallWithArgumentList(QLatin1String("executeSecond"), argumentList);
    }

    inline QDBusPendingReply<bool> isAnyGameStarted()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("isAnyGameStarted"), argumentList);
    }

    inline QDBusPendingReply<bool> isGameStarted(const QString &serviceId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceId);
        return asyncCallWithArgumentList(QLatin1String("isGameStarted"), argumentList);
    }

    inline QDBusPendingReply<> shutdownSecond()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("shutdownSecond"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void secondServiceFinished(const QString &serviceId, int finishState);
    void secondServiceStarted(const QString &serviceId);
    void serviceFinished(const QString &serviceId, int finishState);
    void serviceStarted(const QString &serviceId);
};

namespace com {
  namespace gamenet {
    namespace dbus {
      typedef ::ExecutorBridgeProxy Executor;
    }
  }
}
#endif
